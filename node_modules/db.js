var Client = (function(conn){
  var init = function(conn){
    var self = this;
    self.client = conn;
  }
  init.prototype = {
    query: function () {
      var self = this;
      var query=arguments[0],
        params = [],
        lastArgument = arguments[arguments.length-1],
        handler = (typeof(lastArgument)=='function') ? lastArgument : false;
      if (typeof(arguments[1])=='object')
        self.objectToArray(query,arguments[1],handler);
      else
        self.argumentToArray(query,arguments,handler);
    },
    argumentToArray: function (query,arg,handler) {
      var self = this;
      var params = [];
      for (var i=1;i<arg.length;i++) {
        var j = arg[i];
        if(typeof(j)!='function')
          params.push(j);
      }
      //escaping
      var i = 1;
      query = query.replace(/\?/g,function(){return '$'+i++});
      self.makeQuery(query,params,handler);
    },
    objectToArray:function(query,arg,handler){
      var self = this;
      var params = [];
      if(query.match(/\?\w+/)){
        //escaping
        query = query.replace(/\?(\w+)/g,function(v,v1){
          if(!arg[v1])return v;
          params.push(arg[v1]);
          return '$'+params.length;
        })
      }else{
        for(var i in arg)
          params.push(arg[i])
        //escaping
        var i = 1;
        query = query.replace(/\?/g,function(){return '$'+i++});
      }
      self.makeQuery(query,params,handler);
    },
    makeQuery:function(query,params,handler){
      var self = this;
      self.client.query(query,params,function(err,result){
         self.makeResult(err,result,handler);
      })
    },
    makeResult:function(err,result,handler){
      handler && handler({
        error:err,
        status:err==null,
        rows:result!=undefined ? result.rows : []
      })
    },
    insert:function(table,object,callback,ret){
      var self = this;
      var splicedData = [],callbackCounter=0;
      if(!(object instanceof Array)){
        object = [object];
      }
      while(object.length){
        splicedData.push(object.splice(0,100));
      }
      if(!splicedData.length){
        self.makeResult(null,undefined,callback);
        return;
      }
      splicedData.forEach(function(bitOfData){
        self.partOfInsert(table,bitOfData,function(data){
          callbackCounter++;
          if((callbackCounter == splicedData.length) && callback) callback(data);
        },ret)
      })
    },
    partOfInsert:function(table,object,callback,ret){
      var self = this;
      var params = [];
      var keys   = Object.keys(object[0]).map(function(k){return '"'+k+'"';}).join(',');
      var values = object.map(function(record){
        return '('+Object.keys(record).map(function(key){
          params.push(record[key]);
          return '$'+params.length;
        }).join(',')+')';
      }).join(','); 
      var query = 'insert into '+table+'('+keys+') values'+values ;
      if(ret)
        query+=' returning '+ret;
      self.makeQuery(query,params,callback);
    },
    check:function(successHandler,errorHandler){
      var self = this;
      if(!self.client){
        successHandler(false);
        errorHandler && errorHandler({message:'no such connection',type:'fatal'})
        return false;
      }
      return true;
    }
  }
  return new init(conn);
});
var Connection = (function(){
  var pg     = require('pg').native;
  var connections = {}; 
  var clientInstans = false;
  return function(conf) {
    var dbIdentifier = JSON.stringify(conf);
    if(!connections[dbIdentifier]) {
      connections[dbIdentifier] = new pg.Client(conf);
      connections[dbIdentifier].connect();
      connections[dbIdentifier].on('error', function(error){
        console.log('query error');
        console.log(error);
      });
      var realQueryMethod = connections[dbIdentifier].query;
      connections[dbIdentifier].query = function(query) {
        //console.log(query);
        return realQueryMethod.apply(connections[dbIdentifier], arguments);
      }
      connections[dbIdentifier].escape =function(data) {
        if(data===undefined) return null;
        return data.toString().replace(/'/ig, '\'\'');
      }
      if(connections[dbIdentifier])
        clientInstans = new Client(connections[dbIdentifier]);
    } 
    if(clientInstans) {
      return clientInstans;
    }
    return false;
  }
})();
module.exports= Connection;
